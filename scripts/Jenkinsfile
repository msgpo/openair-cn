// Temporary script to build OpenAirInterface Core Network
// Author    : Raphael Defosseux
// Copyright : OpenAirInterface Software Alliance (2018)
// Version   : 0.1

pipeline {
    agent {
        label 'orion'
    }
    options {
        disableConcurrentBuilds()
        timestamps()
    }
    environment {
        dns1 = "192.168.106.10"
        dns2 = "192.168.106.12"
        vm_display = "False"
        //vm_template = "CN-Mobility-CI"
        vm_template = "CN-CI-4G"
        spgw_kernel_version = "kernel-4.9"
        mme_vm_template = "template${vm_template}"
        hss_vm_template = "template${vm_template}"
        spgw_vm_template = "template${vm_template}-${spgw_kernel_version}"
    }

    stages {
        stage ('Verify Parameters') {
            steps {
                echo 'Verify Parameters'
                echo "Git URL    is ${GIT_URL}"
                echo "Git Branch is ${GIT_BRANCH}"
                echo "Git Commit is ${GIT_COMMIT}"
                echo "Node       is ${NODE_NAME}"
                echo "Node Label is ${NODE_LABELS}"
//                script {
//                    if (params.nodeToUse == '' || params.nodeToUse == null) {
//                       echo "Node is not defined"
//                    } else {
//                       echo "Node is defined w/ ${params.nodeToUse}"
//                    }
//                }
                sh "sudo mkdir -p ${WORKSPACE}/tmp"
            }
        }
        stage ('Retrieve Source Code') {
            steps {
                dir ('tmp') {
                    sh "sudo sak4ci init  --management-nw '192.168.21.0/24'"
                    sh "sudo sak4ci scm --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER} -u ${GIT_URL} -C ${GIT_COMMIT}"
                }
            }
        }
        stage ('Start MME VM') {
            steps {
                dir ('tmp') {
                    timeout(time: 2, unit: 'MINUTES') {
                        sh "sudo sak4ci install-vm --clone-template True  --snapshot yes --start-vm True --vm-display ${vm_display} --nf-type mme --job-name ${JOB_NAME} --template-domain ${mme_vm_template} --build-id ${BUILD_NUMBER} --dns1 ${dns1} --dns2 ${dns2}"
                    }
                }
            }
        }
        stage ('Start HSS VM') {
            steps {
                dir ('tmp') {
                    timeout(time: 2, unit: 'MINUTES') {
                        sh "sudo sak4ci install-vm --clone-template True  --snapshot yes --start-vm True --vm-display ${vm_display} --nf-type hss --job-name ${JOB_NAME} --template-domain ${hss_vm_template} --build-id ${BUILD_NUMBER} --dns1 ${dns1} --dns2 ${dns2}"
                    }
                }
            }
        }
        stage ('Start SPGW VM') {
            steps {
                dir ('tmp') {
                    timeout(time: 2, unit: 'MINUTES') {
                        sh "sudo sak4ci install-vm --clone-template True  --snapshot yes --start-vm True --vm-display ${vm_display} --nf-type spgw --job-name ${JOB_NAME} --template-domain ${spgw_vm_template} --build-id ${BUILD_NUMBER} --dns1 ${dns1} --dns2 ${dns2}"
                    }
                }
            }
        }
        stage('Install libs & sw') {
            parallel {
                stage ('MME SW') {
                    steps {
                        dir ('tmp') {
                            timeout(time: 25, unit: 'MINUTES') {
                                sh "sudo sak4ci install-libs-packs4nf --nf-type mme --keep-vm-alive True --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage ('HSS SW') {
                    steps {
                        dir ('tmp') {
                            timeout(time: 25, unit: 'MINUTES') {
                                sh "sudo sak4ci install-libs-packs4nf --nf-type hss --keep-vm-alive True --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage ('SPGW SW') {
                    steps {
                        dir ('tmp') {
                            timeout(time: 25, unit: 'MINUTES') {
                                //sh "sudo sak4ci install-libs-packs4nf --nf-type spgw --keep-vm-alive True --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                                echo "Bypassing SPGW Install due to errors"
                            }
                        }
                    }
                }
            }
        }
        stage('Build Core Network Functions') {
            parallel {
                stage ('Build MME') {
                    steps {
                        dir ('tmp') {
                            sh "sudo sak4ci build-nf --nf-type mme --keep-vm-alive True --build-type Release --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                        }
                    }
                }
                stage ('Build HSS') {
                    steps {
                        dir ('tmp') {
                            sh "sudo sak4ci build-nf --nf-type hss --keep-vm-alive True --build-type Release --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                        }
                    }
                }
                stage ('Build SPGW') {
                    steps {
                        dir ('tmp') {
                            //sh "sudo sak4ci build-nf --nf-type spgw --keep-vm-alive True --build-type Release --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                            echo "Bypassing SPGW Build for the moment"
                        }
                    }
                }
            }
        }
        stage('Generate CN configs') {
            parallel {
                stage ('Config MME') {
                    steps {
                        dir ('tmp') {
                            sh "sudo sak4ci nf-configure --nf-type mme --keep-vm-alive True --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                        }
                    }
                }
                stage ('Config HSS') {
                    steps {
                        dir ('tmp') {
                            //sh "sudo sak4ci nf-configure --nf-type hss --keep-vm-alive True --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                            echo "Bypassing HSS configuration for the moment"
                        }
                    }
                }
                stage ('Config SPGW') {
                    steps {
                        dir ('tmp') {
                            //sh "sudo sak4ci nf-configure --nf-type spgw --keep-vm-alive True --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
                            echo "Bypassing SPGW configuration for the moment"
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def message = "Build job #" + BUILD_ID + " completed"
                updateGithubCommitStatus(currentBuild, message)
            }
        }
        failure {
            script {
                def message = "Build job #" + BUILD_ID + " : One step of job failed"
                updateGithubCommitStatus(currentBuild, message)
            }
        }
        unstable {
            script {
                def message = "Build job #" + BUILD_ID + " : One step of job is unstable"
                updateGithubCommitStatus(currentBuild, message)
            }
        }
        aborted {
            updateGithubCommitStatus(currentBuild, "Build job aborted: pipeline script issue?")
            script {
                def message = "Build job #" + BUILD_ID + " aborted: pipeline script issue?"
                updateGithubCommitStatus(currentBuild, message)
            }
        }
        cleanup {
            dir ('tmp') {
                //sh "sudo sak4ci clean-build --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER} --complete True"
                sh "sudo sak4ci clean-build --job-name ${JOB_NAME} --build-id ${BUILD_NUMBER}"
            }
            sh "sudo rm -Rf ${WORKSPACE}/tmp"
        }
    }
}

def getRepoURL() {
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}

def getCommitSha() {
  sh "git rev-parse HEAD > .git/current-commit"
  return readFile(".git/current-commit").trim()
}

def updateGithubCommitStatus(build, jobMessage) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()

  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
    statusResultSource: [
      $class: 'ConditionalStatusResultSource',
      results: [
        [$class: 'AnyBuildResult', state: build.currentResult, message: jobMessage]
      ]
    ]
  ])
}

